/******************************************************************************
 * Copyright 2014-2014 Ricardo F. Guimarães                                    *
 *                                                                             *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may     *
 * not use this file except in compliance with the License. You may obtain a   *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
 *                                                                             *
 * Unless required by applicable law or agreed to in writing, software         *
 * distributed under the License is distributed on an "AS IS" BASIS,           *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
 * See the License for the specific language governing permissions and         *
 * limitations under the License.                                              *
 *                                                                             *
 *******************************************************************************
 * Matches Ontologies by finding literal full-name matches between their       *
 * Lexicons after extension with the data obtained from the English Wiktionary,*
 * using wik2dict.                                                             *
 * @author Ricardo F. Guimarães                                                *
 * @date 06-08-2014                                                            *
 * @version 0.5                                                                *
 ******************************************************************************/

package aml.match;

import aml.AML;
import aml.ontology.Lexicon;
import aml.util.Dictionary;
import aml.util.DictionaryWord;
import aml.util.StringParser;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Created by rickfg on 8/5/14.
 */
public class WikDictMatcher implements PrimaryMatcher, LexiconExtender {

    private final String PATH = "store/knowledge/dictionary/";
    // The type of lexical entry generated by this LexiconExtender
    private final String TYPE = "externalMatch";
    // The source of this LexiconExtender
    private final String SOURCE = "English Wiktionary (wik2dict)";
    // The confidence score of the English Wiktionary
    private final double CONFIDENCE = 0.7;
    //The dictionary
    private Dictionary wikt;

    public WikDictMatcher() {

        // Setup the wik2dict output file location
        long time = System.currentTimeMillis() / 1000;
        wikt = new Dictionary(PATH, "English.txt");
        time = System.currentTimeMillis() / 1000 - time;
        System.out.println("Dictionary loaded in " + time + " seconds");
    }

    @Override
    public Alignment match(double thresh) {
        return null;
    }

    @Override
    public void extendLexicons(double thresh) {
        AML aml = AML.getInstance();
        extendLexicon(aml.getSource().getLexicon(), thresh);
        extendLexicon(aml.getTarget().getLexicon(), thresh);
    }

    private void extendLexicon(Lexicon l, double thresh) {
        //Get a copy of the original Lexicon since the
        //original will be extended during the iteration (otherwise
        //we'd get a concurrentModificationException)
        Lexicon copyL = new Lexicon(l);

        //Iterate through the original Lexicon names
        for (String s : copyL.getNames()) {
            //We don't match formulas to Wiktionary
            if (StringParser.isFormula(s))
                continue;

            List<DictionaryWord> translations = new ArrayList<DictionaryWord>();

            for (String srcLang : copyL.getLanguages(s)) {
                translations.addAll(wikt.getAllTranslations(srcLang, s));
            }

            if (translations.isEmpty())
                continue;

            double conf = CONFIDENCE - 0.01 * translations.size();
            if (conf < thresh)
                continue;

            Set<Integer> terms = l.getInternalClasses(s);
            //Add each term with the translation to the extension Lexicon
            for (Integer i : terms) {
                double weight = conf * l.getWeight(s, i);
                if (weight < thresh)
                    continue;
                for (DictionaryWord w : translations) {
                    l.add(i, w.getWrittenForm(), w.getLangCode(),
                            TYPE, SOURCE, weight);
                }
            }
        }
    }
}