/******************************************************************************
 * Copyright 2013-2014 LASIGE                                                  *
 *                                                                             *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may     *
 * not use this file except in compliance with the License. You may obtain a   *
 * copy of the License at http://www.apache.org/licenses/LICENSE-2.0           *
 *                                                                             *
 * Unless required by applicable law or agreed to in writing, software         *
 * distributed under the License is distributed on an "AS IS" BASIS,           *
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    *
 * See the License for the specific language governing permissions and         *
 * limitations under the License.                                              *
 *                                                                             *
 *******************************************************************************
 * Dictionary of translations obtain from the English Wiktionary, using        *
 * wik2dict                                                                    *
 *                                                                             *
 * @authors Ricardo F. Guimar√£es                                               *
 * @date 30-07-2014                                                            *
 * @version 0.3                                                                *
 ******************************************************************************/

package aml.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.semanticweb.elk.util.collections.Pair;

public class Dictionary {
    // The dictionary produced by wik2dict
    HashMap<Pair<String, String>, DictionaryWord> data;
    // The path to the WordNet database
    private final String PATH = "store/knowledge/dictionary/";
    // The type of lexical entry generated by this LexiconExtender
    private final String TYPE = "externalMatch";
    // The source of this LexiconExtender
    private final String SOURCE = "English Wiktionary (wik2dict)";
    // The confidence score of the English Wiktionary
    private final double CONFIDENCE = 0.7;

    public Dictionary() {
        // Setup the wordnet database directory
        String path = new File(PATH).getAbsolutePath();
        System.setProperty("dictionary.dir", path);
        data = new HashMap<Pair<String, String>, DictionaryWord>();
        FileReader file = null;
        try {
            file = new FileReader(path + "/English.txt");
            BufferedReader reader = new BufferedReader(file);
            String line = "";
            while ((line = reader.readLine()) != null) {
                String[] values = line.split("\\t", -1);
                DictionaryWord first = getWord(values[0], values[1]);
                DictionaryWord second = getWord(values[2], values[3]);
                add(first, second);
            }
            reader.close();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (file != null) {
                try {
                    file.close();
                } catch (IOException e) {
                    // TODO: handle this
                }
            }
        }
    }

    private DictionaryWord getWord(String srcLang, String writtenForm) {
        Pair<String, String> key = new Pair<String, String>(srcLang,
                writtenForm);
        if (data.containsKey(key)) {
            return data.get(key);
        } else
            return new DictionaryWord(srcLang, writtenForm);
    }

    private void add(DictionaryWord firstWord, DictionaryWord secondWord) {
        Pair<String, String> firstPair, secondPair;
        firstPair = new Pair<String, String>(firstWord.getLangCode(),
                firstWord.getWrittenForm());
        secondPair = new Pair<String, String>(secondWord.getLangCode(),
                secondWord.getWrittenForm());
        firstWord.addTranslation(secondWord);
        secondWord.addTranslation(firstWord);

        if (!data.containsKey(firstPair)) {
            data.put(firstPair, firstWord);
        }
        if (!data.containsKey(secondPair)) {
            data.put(secondPair, secondWord);
        }
    }

    public List<DictionaryWord> translate(String srcLang, String writtenForm,
            String tgtLang) {
        Pair<String, String> key = new Pair<String, String>(srcLang,
                writtenForm);
        if (data.containsKey(key)) {
            return data.get(key).getTranslations(tgtLang);
        } else
            return new ArrayList<DictionaryWord>();
    }

    public List<DictionaryWord> getAllTranslations(String srcLang,
            String writtenForm) {
        return data.get(new Pair<String, String>(srcLang, writtenForm))
                .getTranslations();
    }
}
